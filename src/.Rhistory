Spectra_000 <- data.matrix(Spectra_Original)
#Referenzwerte definieren
Reference_000 <- Reference_000
#Dataframe erstellen
Data_000 <- data.frame(Reference=I(Reference_000),Spektren=(Spectra_000))
##################################################
#
#Daten visualisieren
#
###################################################
#load function plot_spectra
#load function plot_spectra
plot_spectra <- function(Spectra_000, Wellenzahl_000) {
spc <- as.data.frame(t(Spectra_000))
spc$wavenumber <- Wellenzahl_000
spc_plot <- plot_ly(data = spc) %>%
layout(
xaxis = list(
range=c(4000,600),
title = "Wavenumber"),
yaxis = list(
title = "Absorbance")
)
i=1
for (i in 1:(dim(spc)[2]-1)){
spc_plot <- add_trace(spc_plot,
x=spc[,ncol(spc)],
y=spc[,i],
data=spc,
type="scatter",
mode="lines",
name=Probenbezeichnung[i])
}
spc_plot
}
#call function plot_spectra
spc_plot <- plot_spectra(Spectra_000,Wellenzahl_000)
spc_plot
### PLS Modell erstellen
#Algorithmus einstellen
number_factors_pls <- 10
run_pls_step1 <- function(Reference_000, Spectra_000, Data_000, number_factors_pls) {
options(digits = 4)
pls.options(plsalg="oscorespls")
PLS_000 <- plsr(Reference_000 ~ Spectra_000, data=Data_000, ncomp=number_factors_pls, val="LOO")
#############
#
#Ergebnisse PLS_000 Modell
#
#############
###Zusammenfassung
summary(PLS_000)
###RMSEP
RMSE <- as.data.frame(RMSEP(PLS_000)[[1]])
RMSE_PLOT <- plot_ly(x=1:number_factors_pls,
y=~as.numeric(RMSE[1,-1]),
mode="lines") %>%
layout(
xaxis = list(
title = "Factor"),
yaxis = list(
title = "RMSE"),
title = "RMSE vs. Factors"
)
###Erklaerte Varianz der Komponenten
VARIANCE_PLOT <- plot_ly(x=1:number_factors_pls,
y=explvar(PLS_000),
mode="line")   %>%
layout(title = "Explained Variance vs. Factors",
xaxis = list(
title = "Factors"),
yaxis = list(
title = "Explained variance [%]")
)
return(list(PLS_000,RMSE_PLOT,VARIANCE_PLOT))
}
pls_group <- run_pls_step1(Reference_000, Spectra_000, Data_000, number_factors_pls)
pls_result <- pls_group[[1]]
#RMSE plot
pls_rmse_plot <- pls_group[[2]]
#explained variance
pls_variance_plot <- pls_group[[3]]
pls_rmse_plot
#explained variance
pls_variance_plot <- pls_group[[3]]
pls_variance_plot
pls_result
pls_result
##############################################
Faktor <- 5
run_pls_step2 <- function(Reference_000, Faktor, PLS_000, Wellenzahl_000, number_factors_pls) {
i=1
#Predicted vs. Measured inkl. Geradengleichung und Bestimmtheitsmasz; Faktor eingeben und ausfuehren
Coord <- par('usr')
YY <- length(Reference_000)
B <- Faktor*YY
A <- (B-YY)+1
predicted_000 <- PLS_000$validation$pred[A:B]
reference_000 <- Reference_000
Modell_000 <- lm (predicted_000 ~ reference_000)
summary(Modell_000)
PRED_MEASURED_PLOT <- plot_ly(x=reference_000,y=predicted_000,text=1:length(reference_000),type = "scatter") %>%
add_trace(x = ~reference_000, y = Modell_000$fitted.values,mode="lines") %>%
layout(title = 'Measured vs. Predicted',
showlegend = FALSE,
annotations = list(
x = Coord[1]*1.1,
y = Coord[4]*0.95,
text = paste("R^2=",round(summary(Modell_000)$r.squared,4),"\n",
"Achsenabschnitt=",round(summary(Modell_000)$coefficients[1],4),"\n",
"Steigung=",round(summary(Modell_000)$coefficients[2],4)),
showarrow = F,
xanchor="left")
)
###Scoreplot
SCOREPLOT <- plot_ly(x=PLS_000$scores[,1],
y=PLS_000$scores[,2],
text=1:length(PLS_000$scores[,1]),
type="scatter") %>%
layout(
xaxis = list(
title = "PC1"),
yaxis = list(
title = "PC2"),
title = "Scoreplot"
)
###Loadingplot
#Welche Loadings sollten geplottet werden?
n_loadings <- c(1:Faktor)
ldg <- seq(1,length(Wellenzahl_000)*number_factors_pls,by=length(Wellenzahl_000))
ldg <- c(ldg,length(Wellenzahl_000)*number_factors_pls)
lwz_000 <- length(Wellenzahl_000)
LOADING_PLOT <- plot_ly(x=~Wellenzahl_000)
for (i in n_loadings){
LOADING_PLOT <- add_trace(LOADING_PLOT,
x=Wellenzahl_000,
y=PLS_000$loadings[ldg[i]:(ldg[i+1]-1)],
text=1:length(Wellenzahl_000),
type="scatter",
mode="lines",
name=paste("Loading",i)) %>%
layout(title="Loadingplot",
xaxis = list(
range=c(4000, 600),
tickformat = "digit"),
yaxis = list(
title = "Loadings")
)
}
###Residuen
YYY <- length(Reference_000[!is.na(Reference_000)])
BB <- Faktor*YYY
AA <- (BB-YYY)+1
x <- 1:(BB-AA+1)
RESIDUENPLOT <- plot_ly(x=x,
y=PLS_000$residuals[AA:BB]) %>%
layout(title = "Residuenplot",
yaxis = list(
title = "Residuen"),
xaxis = list(
title = "Sample Number")
)
return(list(PLS_000,PRED_MEASURED_PLOT,SCOREPLOT,LOADING_PLOT,RESIDUENPLOT))
}
pls_group_of_step2 <- run_pls_step2(Reference_000, Faktor, pls_result, Wellenzahl_000, number_factors_pls)
pls_measured_plot <- pls_group_of_step2[[2]]
pls_score_plot <- pls_group_of_step2[[3]]
pls_loading_plot <- pls_group_of_step2[[4]]
pls_residual_plot <- pls_group_of_step2[[5]]
pls_residual_plot
# Data Preparation
library(plotly)
library(dplyr)
library(prospectr)
Data_Raw <- read.csv("C:\\Users\\sebne\\Documents\\FHWN_Tulln\\DataAnalysis\\PLS_Regression\\Model_comparison\\spectra_textiles_mir.csv",header=TRUE,sep=";",dec=",", row.names = 1)
### assign variables
Spectra_Original <- Data_Raw[,-c(1:2)]
Probenbezeichnung <- rownames(Data_Raw)
# Function to extract the first number from a string
extract_number <- function(string) {
number <- as.numeric(sub("\\D*(\\d+).*", "\\1", string))
ifelse(is.na(number), 50, number)
}
# Extracting numbers from sample names
numbers <- sapply(Probenbezeichnung, extract_number)
numbers[numbers < 10] <- 50
Reference_000 <- numbers
###Wellenzahl erzeugen
Wellenzahl_000 <- as.numeric(sub("X","0",names(Spectra_Original)))
names(Spectra_Original) <- as.numeric(sub("X","0",names(Spectra_Original)))
#Spektren als Matrix abspeichern
Spectra_000 <- data.matrix(Spectra_Original)
#Dataframe erstellen
Data_000 <- data.frame(Reference=I(Reference_000),Spektren=(Spectra_000))
# SNV
Spectra_100 <- standardNormalVariate(Spectra_Original)
Reference_100 <- 100-Reference_000
# Outlier Removal
Spectra_101 <- Spectra_100
Spectra_101 <- Spectra_101[-c(4),]
Reference_101 <- Reference_100
Reference_101 <- Reference_101[-c(4)]
#Spektralen Bereich einschraenken
Spectra_101[,c(1:200,610:1140,1715:1760)] <- 0
Wellenzahl_101 <- Wellenzahl_000
#Spektren als Matrix abspeichern
Spectra_101 <- data.matrix(Spectra_101)
#Dataframe erstellen
Data_101 <- data.frame(Reference=I(Reference_101),Spektren=(Spectra_101))
library(pls)
### PLS Modell erstellen
#Algorithmus einstellen
options(digits = 4)
pls.options(plsalg="oscorespls")
PLS_kernel <- plsr(Reference_101 ~ Spectra_101, data=Data_101, ncomp=10, val="LOO")
saveRDS(PLS_kernel,"PLS_kernel_MIR.RDS")
saveRDS(Reference_101,"Reference_101_MIR.RDS")
View(PLS_kernel)
View(PLS_kernel)
options(digits = 4)
pls.options(plsralg = "simpls", mvralg = "simpls")
PLS_simpls <- plsr(Reference_101 ~ Spectra_101, data=Data_101, ncomp=10, val="LOO")
View(PLS_simpls)
###################################################
###################################################
#
#Ausreiszer entfernen
#Spektralen Bereich einschraenken
#
###################################################
library(mdatools)
Spectra_mda <- Spectra_100
#Spektralen Bereich einschraenken
Spectra_mda[,c(1:200,610:1140,1715:1760)] <- 0
Spectra_mda <- data.matrix(Spectra_mda)
Reference_mda <- 100-Reference_000
myprep <- list(
prep("snv")
#prep("msc"),
#prep("alsbasecorr", list(plambda = 5, p = 2, max.niter = 1))
)
preprocessing <- function(originalspectra, prep_set) {
attr(originalspectra, "xaxis.values") = as.numeric(colnames(originalspectra))
attr(originalspectra, "xaxis.name") = "Wavenumber"
# apply combined methods
pspectra <- employ.prep(prep_set, originalspectra)
par(mfrow = c(2, 1))
#mdaplot(originalspectra, type = "l", main = "Original")
#mdaplot(pspectra, type = "l", main = "after treatment")
return(pspectra)
}
pspectra <- preprocessing(Spectra_000,myprep)
#Procrustes cross-validation
library(pcv)
Xpv = pcvpls(pspectra, Reference_mda, 20, cv = list("ven", 10))
pls_model_pcv = pls(pspectra, Reference_mda, 10, x.test = Xpv, y.test = Reference_mda)
# get row indices for outliers in calibration set
outliers = which(categorize(pls_model_pcv, pls_model_pcv$res$cal) == "outlier")
if (length(outliers) > 0) {
# keep data for outliers in separate matrices
Xo_pcv = pspectra[outliers, , drop = FALSE]
yo_pcv = Reference_mda[outliers,  drop = FALSE]
# remove the rows with outliers from the data
X_pcv = pspectra[-outliers, , drop = FALSE]
y_pcv = Reference_mda[-outliers,  drop = FALSE]
# make a new model for outlier free data
pls_model_pcv = pls(X_pcv, y_pcv, 10, scale = TRUE, cv = 1, lim.type = "ddrobust")
} else {
# No outliers, you can decide to use the existing model or handle this case differently
print("No outliers detected; no new model will be created.")
}
#LOO cross-validation
pls_model_loo = pls(pspectra, Reference_mda, 10, scale = TRUE, cv = 1, lim.type = "ddrobust")
# get row indices for outliers in calibration set
outliers = which(categorize(pls_model_loo, pls_model_loo$res$cal) == "outlier")
if (length(outliers) > 0) {
# keep data for outliers in separate matrices
Xo_loo = pspectra[outliers, , drop = FALSE]
yo_loo = Reference_mda[outliers,  drop = FALSE]
# remove the rows with outliers from the data
X_loo = pspectra[-outliers, , drop = FALSE]
y_loo = Reference_mda[-outliers,  drop = FALSE]
# make a new model for oulier free data
pls_model_loo = pls(X_loo, y_loo, 10, scale = TRUE, cv = 1, lim.type = "ddrobust")
} else {
# No outliers, you can decide to use the existing model or handle this case differently
print("No outliers detected; no new model will be created.")
}
saveRDS(pls_model_pcv,"PLS_MIR_PCV.RDS")
saveRDS(pls_model_loo,"PLS_MIR_LOO.RDS")
saveRDS(PLS_kernel,"PLS_kernel_MIR.RDS")
saveRDS(PLS_simpls,"PLS_simpls_MIR.RDS")
View(pls_model_loo)
View(pls_model_pcv)
library(mdatools)
Spectra_mda <- Spectra_100
#Spektralen Bereich einschraenken
Spectra_mda[,c(1:200,610:1140,1715:1760)] <- 0
Spectra_mda <- data.matrix(Spectra_mda)
Reference_mda <- 100-Reference_000
myprep <- list(
prep("snv")
#prep("msc"),
#prep("alsbasecorr", list(plambda = 5, p = 2, max.niter = 1))
)
preprocessing <- function(originalspectra, prep_set) {
attr(originalspectra, "xaxis.values") = as.numeric(colnames(originalspectra))
attr(originalspectra, "xaxis.name") = "Wavenumber"
# apply combined methods
pspectra <- employ.prep(prep_set, originalspectra)
library(mdatools)
Spectra_mda <- Spectra_100
#Spektralen Bereich einschraenken
Spectra_mda[,c(1:200,610:1140,1715:1760)] <- 0
Spectra_mda <- data.matrix(Spectra_mda)
Reference_mda <- 100-Reference_000
myprep <- list(
prep("snv")
#prep("msc"),
#prep("alsbasecorr", list(plambda = 5, p = 2, max.niter = 1))
)
preprocessing <- function(originalspectra, prep_set) {
attr(originalspectra, "xaxis.values") = as.numeric(colnames(originalspectra))
attr(originalspectra, "xaxis.name") = "Wavenumber"
# apply combined methods
pspectra <- employ.prep(prep_set, originalspectra)
par(mfrow = c(2, 1))
#mdaplot(originalspectra, type = "l", main = "Original")
#mdaplot(pspectra, type = "l", main = "after treatment")
return(pspectra)
}
pspectra <- preprocessing(Spectra_000,myprep)
#LOO cross-validation
pls_model_loo = pls(pspectra, Reference_mda, 10, scale = TRUE, cv = 1, lim.type = "ddrobust")
# get row indices for outliers in calibration set
outliers = which(categorize(pls_model_loo, pls_model_loo$res$cal) == "outlier")
# get row indices for outliers in calibration set
outliers = which(categorize(pls_model_loo, pls_model_loo$res$cal) == "outlier")
library(plotly)
library(dplyr)
library(prospectr)
Data_Raw <- read.csv("C:\\Users\\sebne\\Documents\\FHWN_Tulln\\DataAnalysis\\repo\\input\\spectra_mir_240806.csv",header=TRUE,sep=";",dec=",", row.names = 1)
Data_Raw$pet
### assign variables
Spectra_Original <- Data_Raw[,-c(1:2)]
Probenbezeichnung <- rownames(Data_Raw)
# Function to extract the first number from a string
extract_number <- function(string) {
number <- as.numeric(sub("\\D*(\\d+).*", "\\1", string))
ifelse(is.na(number), 50, number)
}
# Extracting numbers from sample names
numbers <- sapply(Probenbezeichnung, extract_number)
numbers[numbers < 10] <- 50
numbers1 <- Data_Raw$measuring_date
Reference_000 <- numbers
###Wellenzahl erzeugen
Wellenzahl_000 <- as.numeric(sub("X","0",names(Spectra_Original)))
names(Spectra_Original) <- as.numeric(sub("X","0",names(Spectra_Original)))
#Spektren als Matrix abspeichern
Spectra_000 <- data.matrix(Spectra_Original)
#Dataframe erstellen
Data_000 <- data.frame(Reference=I(Reference_000),Spektren=(Spectra_000))
# SNV
Spectra_100 <- standardNormalVariate(Spectra_Original)
Reference_100 <- 100-Reference_000
# Outlier Removal
Spectra_101 <- Spectra_100
Spectra_101 <- Spectra_101[-c(4),]
Reference_101 <- Reference_100
Reference_101 <- Reference_101[-c(4)]
limit_spectral_area <- function(spectra, limit) {
spectra[,limit] <- 0
return(spectra)
}
#Spektralen Bereich einschraenken
#Spectra_101[,c(1:200,610:1140,1715:1760)] <- 0
mir_limit <- c(1:200,610:1140,1715:1760)
Spectra_101 <- limit_spectral_area(Spectra_101, mir_limit)
Wellenzahl_101 <- Wellenzahl_000
#Spektren als Matrix abspeichern
Spectra_101 <- data.matrix(Spectra_101)
#Dataframe erstellen
Data_101 <- data.frame(Reference=I(Reference_101),Spektren=(Spectra_101))
View(Spectra_101)
source("C:/Users/sebne/Documents/FHWN_Tulln/DataAnalysis/repo/src/data_prep_convert_TXT_to_CSV.R")
source("C:/Users/sebne/Documents/FHWN_Tulln/DataAnalysis/repo/src/data_prep_convert_TXT_to_CSV.R")
########################
#
#Get several OPUS files to R
#
#David Lilek 220328
#######################
# Before using script:
#### use Converter-FolderFiles.mtb file and anleitung N:\Spektroskopie\Geräte\RAMAN\Bedienung\ExportOpus_alsTxt.file_V001.docx
#### to convert OPUS files to several TXT files
load_txt_files <- function(file_name, dir) {
path <- file.path(dir, file_name)
df <- try(read.csv(path, header = FALSE, sep = ",", dec = "."))
return(df)
}
split_file_name <- function(file_path) {
file_name_with_ending <- basename(file_path)
file_name <- strsplit(file_name_with_ending, split = "\\.")[[1]][1]
feature_list <- strsplit(file_name, split = "_")[[1]]
return(feature_list)
}
extract_number <- function(feature_list, index) {
text <- sapply(feature_list, `[[`, index)
number <- regmatches(text, regexpr("[0-9]+", text))
return(number)
}
#########################
##Import Function
#########################
# dir: Path, where the TXT.files are located
convert_txt_to_dataframe <- function(dir) {
# List the TXT.files in the directory
file_paths <- list.files(path = dir, recursive = TRUE, include.dirs = TRUE, pattern = ".txt")
# Load TXT files
raw_dfs <- lapply(file_paths, load_txt_files, dir = dir)
# Combine list of data frames
combined_dfs <- do.call("cbind", raw_dfs)
# Remove wavenumbers
spectra <- as.data.frame(t(combined_dfs[, -c(which(colnames(combined_dfs) == "V1"))]))
# Extract wavenumbers and set as column names
wave_numbers <- round(as.numeric(combined_dfs[, 1]), 2)
colnames(spectra) <- wave_numbers
# File names as row name/unique id
rownames(spectra) <- lapply(file_paths, basename)
# Extracting features/meta data from the file name
features <- lapply(file_paths, split_file_name)
spectra$pet <- sapply(features, `[[`, 2)
spectra$cotton <- sapply(features, `[[`, 3)
spectra$specimen <- extract_number(features, 4)
spectra$area <- extract_number(features, 5)
spectra$spot <- extract_number(features, 6)
spectra$measuring_date <- sapply(features, `[[`, 7)
return(spectra)
}
spectra <- convert_txt_to_dataframe(dir = "../input/clean_txt/NIR")
#write to csv file
write.csv2(spectra, "spectra_nir_240812.csv", row.names = TRUE)
########################
#
#Get several OPUS files to R
#
#David Lilek 220328
#######################
source("C:/Users/sebne/Documents/FHWN_Tulln/DataAnalysis/repo/src/data_prep_convert_TXT_to_CSV.R")
########################
#
#Get several OPUS files to R
#
#David Lilek 220328
#######################
# Before using script:
#### use Converter-FolderFiles.mtb file and anleitung N:\Spektroskopie\Geräte\RAMAN\Bedienung\ExportOpus_alsTxt.file_V001.docx
#### to convert OPUS files to several TXT files
load_txt_files <- function(file_name, dir) {
path <- file.path(dir, file_name)
df <- try(read.csv(path, header = FALSE, sep = ",", dec = "."))
return(df)
}
split_file_name <- function(file_path) {
file_name_with_ending <- basename(file_path)
file_name <- strsplit(file_name_with_ending, split = "\\.")[[1]][1]
feature_list <- strsplit(file_name, split = "_")[[1]]
return(feature_list)
}
extract_number <- function(feature_list, index) {
text <- sapply(feature_list, `[[`, index)
number <- regmatches(text, regexpr("[0-9]+", text))
return(number)
}
#########################
##Import Function
#########################
# dir: Path, where the TXT.files are located
convert_txt_to_dataframe <- function(dir) {
# List the TXT.files in the directory
file_paths <- list.files(path = dir, recursive = TRUE, include.dirs = TRUE, pattern = ".txt")
# Load TXT files
raw_dfs <- lapply(file_paths, load_txt_files, dir = dir)
# Combine list of data frames
combined_dfs <- do.call("cbind", raw_dfs)
# Remove wavenumbers
spectra <- as.data.frame(t(combined_dfs[, -c(which(colnames(combined_dfs) == "V1"))]))
# Extract wavenumbers and set as column names
wave_numbers <- round(as.numeric(combined_dfs[, 1]), 2)
colnames(spectra) <- wave_numbers
# File names as row name/unique id
rownames(spectra) <- lapply(file_paths, basename)
# Extracting features/meta data from the file name
features <- lapply(file_paths, split_file_name)
spectra$pet <- sapply(features, `[[`, 2)
spectra$cotton <- sapply(features, `[[`, 3)
spectra$specimen <- extract_number(features, 4)
spectra$area <- extract_number(features, 5)
spectra$spot <- extract_number(features, 6)
spectra$measuring_date <- sapply(features, `[[`, 7)
return(spectra)
}
spectra <- convert_txt_to_dataframe(dir = "../input/clean_txt/NIR")
#write to csv file
write.csv2(spectra, "spectra_nir_240812.csv", row.names = TRUE)
spectra <- convert_txt_to_dataframe(dir = "../input/clean_txt/NIR")
source("C:/Users/sebne/Documents/FHWN_Tulln/DataAnalysis/repo/src/data_prep_convert_TXT_to_CSV.R")
getwd()
setwd(C:/Users/sebne/Documents/FHWN_Tulln/DataAnalysis/repo/src)
setwd('C:/Users/sebne/Documents/FHWN_Tulln/DataAnalysis/repo/src')
source("C:/Users/sebne/Documents/FHWN_Tulln/DataAnalysis/repo/src/data_prep_convert_TXT_to_CSV.R")
